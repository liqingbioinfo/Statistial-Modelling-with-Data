# -*- coding: utf-8 -*-
"""Lecture_8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w-i3u5MxjOHWvA1oXDd6SNrfS3Tc_t-v

# Load some packages
"""

# Tensorflow and tf.keras
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.layers import Flatten, Dense, Conv2D

#Import some commonly used python package
import pandas as pd
import numpy as np
import os
import sys

print(tf.__version__)

"""# Exercise 1"""

from keras.api._v2.keras import activations

def build_model():
  model = keras.sequential(
      [
          Dense(20, activations=tf.nn.relu, input_shape=[len(train_features[0])]),
          Dense(1) #one response
      ]
  )

  model.compile(optimizer=tf.optimizers.Adam(),
                loss='mse',
                metrices=['mse']
                )
  return model


"""# Exercise 2"""

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split

iris_data = load_iris()
df=pd.DataFrame(iris_data.data, columns=iris_data.feature_names)
df.head(3)

df.shape #dim() in R

training_dataset,  test_dataset = train_test_split(df, test_size=0.2, random_state=25)

training_dataset.shape

test_dataset.shape

"""# Exercise 3"""

(train_features, train_labels), (test_features, test_labels) = keras.datasets.boston_housing.load_data()

# get per-feature statistics (mean, standard deviation) from the training set to normalize by
train_mean = np.mean(train_features, axis=0)
train_std = np.std(train_features, axis=0)
train_features = (train_features - train_mean) / train_std

# this helps makes our output less verbose but still shows progress
model = build_model()

history = model.fit(train_features, train_labels, epochs=1000, verbose=0, validation_split = 0.1)

hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch

# show RMSE measure to compare to Kaggle leaderboard on https://www.kaggle.com/c/boston-housing/leaderboard
rmse_final = np.sqrt(float(hist['mse'].tail(1)))
print()
print('Final Root Mean Square Error on validation set: {}'.format(round(rmse_final, 3)))